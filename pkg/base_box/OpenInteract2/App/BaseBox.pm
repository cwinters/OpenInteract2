package OpenInteract2::App::BaseBox;

# $Id: BaseBox.pm,v 1.4 2005/09/24 14:00:51 lachoy Exp $

use strict;
use base qw( Exporter OpenInteract2::App );
use OpenInteract2::Manage;

$OpenInteract2::App::BaseBox::VERSION = sprintf("%d.%02d", q$Revision: 1.4 $ =~ /(\d+)\.(\d+)/);
@OpenInteract2::App::BaseBox::EXPORT  = qw( install );

my $NAME = 'base_box';

# Not a method, just an exported sub
sub install {
    my ( $website_dir ) = @_;
    my $manage = OpenInteract2::Manage->new( 'install_package' );
    $manage->param( website_dir   => $website_dir );
    $manage->param( package_class => __PACKAGE__ );
    return $manage->execute;
}

sub new {
    return OpenInteract2::App->new( $NAME );
}

sub get_brick {
    require OpenInteract2::Brick;
    return OpenInteract2::Brick->new( $NAME );
}

sub get_brick_name {
    return $NAME;
}

OpenInteract2::App->register_factory_type( $NAME => __PACKAGE__ );

1;

__END__

=pod

=head1 NAME

OpenInteract2::App::BaseBox - Manage input and output of independent boxes.

=head1 SYNOPSIS

 # Deposit all boxes accumulated during request in the current
 # location on the page:
 [% OI.action_execute( 'boxes' ) %]
 
 # Define an OI action (in conf/action.ini) to be used for a box with
 # a class and method:
 [current_weather_box]
 class    = OpenInteract2::Action::Weather
 method   = box
 weight   = 5
 title    = Current Weather
 
 # Add the box in code ('name' maps to the above OI action):
 my $zip = $self->request->auth_user->{zipcode};
 my %box = (
     name   => 'current_weather_box',
     weight => 2,
     title  => "Weather in Zip Code $zip",
     params => { zip_code => $zip }
 );
 $self->controller->add_box( \%box );
 
 # Add the box from a template:
 [% user_zip = OI.login.zip_code;
    OI.box_add( 'current_weather_box',
                weight   = 2,
                title    = "Weather in Zip Code $user_zip",
                zip_code = $user_zip ) -%]
 
 # Define an OI action (in conf/action.ini) to be used for a
 # template-only box:
 [frequent_links_box]
 template  = mypkg::box_frequent_links
 weight    = 8
 title     = Frequent Links
 security  = no
 url_none  = yes
 
 # Reference our template-only box, overriding weight and title:
 my %box = (
     name   => 'frequent_links_box',
     weight => 2,
     title  => "Most visited sites"
 );
 $self->controller->add_box( \%box );
 
 # Reference the same template-only box from a template, overriding title:
 [% OI.box_add( 'frequent_links_box',
                title  = 'Most visited sites' ) %]
 
 # Add a non-specified template-only box:
 my %box = (
     name        => 'myapp::mytemplate',
     is_template => 'yes',
 );
 $self->controller->add_box( \%box );

 # Remove a box added in another part of the system
 $self->controller->remove_box( 'motd' );
 
 # Remove the same box from a template
 [% OI.box_remove( 'motd' ) %]

=head1 DESCRIPTION

A box contains content generated by an L<OpenInteract2::Action>. That
content, plus some extra parameters, fits into a particular form so
that all boxes look the same (if you want them to). The action doing
the generating can be a typical class or just a template.

In either case the box handler (L<OpenInteract2::Action::Box>) sorts
the boxes and places the content for each in a 'shell'. The standard
box looks something like this, as defined by 'class' attributes and
CSS definitions:

 ---------------------- <-- 'shell'
 |      BOX TITLE     |
 ----------------------
 | Box content        |
 | generated by an    |
 | action goes here   |
 ----------------------

But you can create your own shell for all boxes so they can look like
this:

 BOX TITLE | Box content
           | generated by an
           | action goes here

or whatever HTML/CSS magic you can conjure. You can also change the
shell for a box at a time, provide localization keys instead of
harcoded titles, provide parameters so that the content is specific to
the current user, and much more.

=head1 BOX SAMPLES

An individual box also has a say as to how it will be rendered as well
as the content it will have. We'll go through a few different use
cases.

=head2 Sample: Template-only, no parameteters

You can also just pass a template name for a box:

 CTX->controller->add_box( 'mypkg::my_box_template' );

Which simply uses the scalar passed in as the template name and the
box name, and uses all the defaults. However, you will likely get a
box with a title 'Generic Box', which is probably not what you want.

=head3 Sidebar: It's still an action...

Just in case you thought that template-only boxes were an exception to
the 'every box is an action' rule: underneath the hood we create an
action of type 'template_only' and just assign the parameter
'template' as the template name you pass in. You can do the exact same
thing by defining your action like this:

 [my_box]
 action_type = template_only
 template    = mypkg::my_box_template

And then adding the box like this:

 CTX->controller->add_box( 'my_box' );

The advantage is that the second uses a layer of abstraction for
flexibility. So if you later want to perform some non-templating
actions you can change the definition of the 'my_box' action to
something like:

 [my_box]
 class  = OpenInteract2::Action::MyBox
 task   = generate_box
 paramA = foo
 ...

and not have to change anything else.

=head2 Sample: Template-only, parameters

Another example -- this time you have to set your template as the
parameter 'template' since you've got other box-specific properties to
assign:

 CTX->controller->add_box({
     name   => 'mypkg::my_box_template',
     weight => 1,
     title  => 'My First Box'
 });

Again, see L<BOX PROPERTIES> for everything you can assign.

=head2 Sample: Box from simple action

Like we said above, every box is just an action in a different
format. So say we have an action implementation like this:

 package OpenInteract2::Action::InsultUser;
 
 use base qw( OpenInteract2::Action );
 use OpenInteract2::Context qw( CTX );
 
 sub insult {
     my ( $self ) = @_;
     my $user = CTX->request->auth_user;
     my $first_name = $user->first_name;
     return ( $user->id % 2 == 0 )
              ? "$first_name, you stink of elderberries"
              : "$first_name, your mother was a donkey";
 }
 
 1;

Very simple, and like the rest of OpenInteract2 you don't have to
worry about details like the source agsinst which the user was
authenticated. Here we only change the content based on the user ID,
but it would be easy to change it to lookup a fortune:

 sub insult {
     my ( $self ) = @_;
     my $first_name = CTX->request->auth_user->first_name;
     my $fortune = `/usr/bin/fortune insult`;
     return "$first_name: $fortune";
 }

Or say we wanted to lookup an insult based on the geographic IP
address of the user:

 my %INSULTS = (
    US     => "I hear the people in America are so stupid...",
    Canada => "Canadians are so rude...",
 );
 
 sub insult {
     my ( $self ) = @_;
     my $gi = Geo::IP->new( GEOIP_STANDARD );
     my $host = CTX->request->remote_host;
     my $country = $gi->country_code_by_addr( $host );
     return "$first_name: $INSULTS{ $country }";
 }

All this is hidden -- it's just an action that generates content. Our
configuration for the box action points to the class and method;
here's the most basic configuration to which we'll add values to see
how they're reflected (from the C<conf/action.ini>):

 [insult_box]
 class = OpenInteract2::Action::InsultUser
 task  = insult

We'd add the box from a template like this -- 'insult_box' is from the
name of our action found in the INI section heading ('[insult_box]'):

 [% OI.box_add( 'insult_box' ) %]

When invoked by the 'boxes' action this might generate something like:

 ----------------------
 |   Generic Box      |
 ----------------------
 | Chris, you stink   |
 | of elderberries    |
 ----------------------

Well, 'Generic Box' doesn't really do our box justice. Let's set the
title ourselves by adding a parameter to the action configuration:

 [insult_box]
 class = OpenInteract2::Action::InsultUser
 task  = insult
 title = Your Insult

The box will now look like this:

 ----------------------
 |   Your Insult      |
 ----------------------
 | Chris, you stink   |
 | of elderberries    |
 ----------------------

Surprisingly, our insults wind up attracting worldwide attention and
people around the world want to see the title in their own
language. (Our research hasn't yet shown that people actually want the
insults in their own language...) So instead of hardcoding a title
we'll use a localization key:

 [insult_box]
 class     = OpenInteract2::Action::InsultUser
 task      = insult
 title_key = insult.title

And in our localization files we'd have something like:

 myapp-en.msg
 ----------
 insult.title = Your Insult
 
 myapp-es.msg
 ----------
 insult.title = Su Insulto

So if I login with my browser's preferred language set to Spanish
('es') I'd see:

 ----------------------
 |    Su Insulto      |
 ----------------------
 | Chris, you stink   |
 | of elderberries    |
 ----------------------

See below under L<BOX PROPERTIES> for all the other properties you can
assign.

=head2 Sample: Box from more complex action with template

Now we'll show a more complicated box where we retrieve data from a
database and send them onto a template. This example is from the
'comments' package, so you can see it in action whenever you like.

First, we'll declare the box in the comment package's
C<conf/action.ini>:

 [comment_recent]
 class                 = OpenInteract2::Action::Comments
 task                  = comment_recent
 is_secure             = no
 url_none              = yes
 cache_expire          = 30m
 template_source       = comments::box_comment_recent
 title_key             = comments.recent
 default_comment_count = 5

Note that we're mixing in box properties with the action parameters
here. For instance, 'title_key' is an action parameter but the box
processor will find it and translate it to the 'label' field passed to
the box shell (see L<BOX PROPERTIES> below). But the 'is_secure' tells
OI2 whether to check security on the action, and 'url_none' tells it
to ensure the action cannot be called by a URL.

And since the box is just an action we can take advantage of caching
as well: the 'cache_expire' action property tells OI2 how long it can
cache the generated content. This means the database call you'll see
below will only happen once every 30 minutes.

Finally, we associate in configuration the action data with a template
using the 'template_source' action property, which means we won't have
reference the template in code.

So now let's look at the method we referenced in the 'class' and
'task' action properties:

 package OpenInteract2::Action::Comments
 ...
 sub comment_recent {
     my ( $self ) = @_;
     my $recent_num = $self->param( 'comment_count' ) ||
                      $self->param( 'default_comment_count' ) ||
                      5; # last-ditch effort...
     my %params = ();
     my $comments = eval {
         OpenInteract2::Comment->fetch_group({
             limit        => $recent_num,
             order        => 'posted_on DESC',
             column_group => 'summary',
         })
     };
     if ( $@ ) {
         $params{error} = $self->_msg(
             'comments.error.cannot_fetch_recent', "$@" );
     }
     else {
         $params{comments} = $comments;
     }
     return $self->generate_content( \%params );
 }

First we determine how many comments to display. Note that the first
try is to an action parameter 'comment_count'. You can set this when
you add the box:

 From a template:
 [% OI.box_add( 'comment_recent', comment_count = 3 ) %]
 
 From code:
 CTX->controller->add_box({
     name          => 'comment_recent',
     comment_count => 3,
 });

Next we'll retrieve the most recent comments. Comments are represented
by a SPOPS object (L<OpenInteract2::Comment>) which inherits the SPOPS
method <fetch_group()>. That method retieves objects using arbitrary
criteria.

If we get an error we assign it to the parameter 'error', otherwise we
stuff the retrieved comments in the parameter 'comments'. We then pass
these parameters to the action C<generate_content()> method, which is
smart enough to associate them with the 'template_source' we defined
in the action configuration.

Here's the template that gets the comments:

 [% IF error %]
 
 <p>[% error %]</p>
 
 [% ELSIF comments.size == 0 -%]
 
   <p>[% MSG( 'comments.no_comments' ) %]</p>
 
 [% ELSE -%]
 
   <ul class="listInBox">
   [% FOREACH comment = comments;
      object_url = comment.get_summary.object_url;
      post_date  = OI.date_format( comment.posted_on, '%d-%b %H:%M' ); -%]
    <li><a href="[% object_url %]">[% comment.subject %]</a>
        on [% post_date %]</li>
   [% END %]
   </ul>
 
 [% END -%]

In the template we'll display the error if it exists, or display a
message that no comments were found if the 'comments' list is empty,
or display a bulleted list of the posted comments. So it might look
like:

 * <mod_perl rocks> on 13-Jan 12:45
 * <I hate faxes> on 13-Jan 9:09
 * <my monitor's great> on 12-Jan 18:19

Once that's generated the box processor will place that content into
the box shell. So assuming we can resolve the 'title_key' parameter
(which was 'comments.recent') using the following message key
definition:

 In comments-messages-en.msg:
 
 comments.recent = Recent Comments

The final box could look like:

 -----------------------------------------
 |           Recent Comments             |
 -----------------------------------------
 | * <mod_perl rocks> on 13-Jan 12:45    |
 | * <I hate faxes> on 13-Jan 9:09       |
 | * <my monitor's great> on 12-Jan 18:19|
 -----------------------------------------

=head1 BOX PROPERTIES

Every box can define the following properties:

=over 4

=item *

B<name> ($)

Name of the action that will generate the content for this box or it
may also be the name of the template for this box.

=item *

B<box_name> ($)

Solely used to identify the box; if not provided we use the 'name'
parameter. This is useful if you've got two boxes referencing the same
action (or template) but with different content.

For instance, say you had a box 'weather' that displayed weather
information for a location. And that on one page you had boxes for two
locations:

 [% OI.add_box( 'weather',
                box_name = 'pgh weather', zip = '15216');
    OI.add_box( 'weather',
                box_name = 'silver spring weather', zip = '29010' }); %]

If you later wanted to remove one of the boxes you'd be able to delete
only the first like this and leave the other untouched:

 [% OI.remove_box( 'pgh weather' ) %]

=item *

B<weight> ($)

Number between 1 (top) and 10 (bottom) indicating where you want the
box to be. If you do not specify the weight the C<default_box_weight>
action parameter will be used; if that's not defined the world is an
uncertain place, so who knows what'll happen?

=item *

B<box_template> ($) (optional)

If you specify the keyword '_blank_' then your box content will be
'naked' and not wrapped by anything else. If you leave this empty you
will use the template specified in the 'default_box_template' action
parameter.

=back

The 'title' properties will get resolved to a variable 'label' which
is passed to the shell:

=over 4

=item *

B<title> ($) (optional)

Display name of box used in the 'shell' wrapper, if you elect to use
that.

B<title_key> ($) (optional)

Localization key to use for box title, generally used in place of
'title' and if both are present this will be used.

=back

The 'title_image' properties will get resolved to a variable
'label_image_src' which is passed to the shell:

=over 4

=item *

B<title_image_src> ($) (optional)

Display an image for the title to be used in the 'shell' wrapper.

=item *

B<title_image_src_key> ($) (optional)

Localization key to use for image title, generally used in place of
'title_image_src' and if both are present this will be used.

=back

The 'title_image_alt' properties will get resolved to a variable
'label_image_alt' which is passed to the shell:

=over 4

=item *

B<title_image_alt> ($) (optional)

Text to put in the 'alt' tag if using an image in the title.

=item *

B<title_image_alt_key> ($) (optional)

Localization key to use for the 'alt' tag in the image title,
generally used in place of 'title_image_alt' and if both are present
this will be used.

=back

Finally, everything else:

=over 4

=item *

B<*> or B<params> (\%) (optional)

Any additional parameters, or parameters specified in C<\%params>,
will be passed through to the action generating the box content.

=back

=head1 BOX COLLECTION

=head2 Configuration

The L<OpenInteract2::Action::Box> action has a number of configuration
parameters that define how the collection of boxes are organized and
how they look. As with all L<OpenInteract2::Action> objects you can
define these parameters in a configuration file (C<conf/action.ini> in
the C<base_box> package) or, more rarely, in the object itself.

=over 4

=item *

B<default_box_template> ($) (optional)

This is the template into which the content generated by box gets put
unless it specifies otherwise (see 'box_template' in L<BOX
PROPERTIES>, below). The default template is
C<base_box::main_box_shell>, which as the name would indicate is also
installed with this package.

B<default_box_separator> ($) (optional)

This is the string used to separate boxes. For instance, if you want
to put a short horizontal rule between each line, you could set this
to:

  default_box_separator = <hr width="50%" noshade />

Or if you had a custom image you wanted to separate your boxes with:

  default_box_separator = <div align="center"><img src="/images/box_sep.gif" height="2" width="25"/></div>

This module defines the default separator as '<br />'.

=item *

B<default_box_weight> ($; optional)

Use as the box weight if unspecified.

=item *

B<system_box_class> ($) (optional)

Defines what we should run on every request to display system
boxes. Typically this is C<OpenInteract2::Action::SystemBoxes>; see
L<OpenInteract2::Action::SystemBoxes> for what this includes.

It is okay if you blank this out, you just will not get the 'login'
and admin-only 'templates used' 'admin tools' boxes on every page.

We call the C<handler()> method on whatever class is defined
here. This class does not (and should not) subclass
L<OpenInteract2::Action>, typically it just adds some boxes for later
processing.

=item *

B<custom_box_class> ($) (optional)

If you want to call a custom handler to run every time B<in addition
to> the system handler named above, list the class here. We call the
C<handler()> method on whatever class is defined here. This class does
not (and should not) subclass L<OpenInteract2::Action>, typically it
just adds some boxes for later processing.

=back

=head1 ACTIONS

The following actions are created by this package:

B<boxes>

Content component that returns all boxes with content generated and in
their shells.

B<object_modify_box>

Generic box for editing/removing an object.

B<login_box>

Box with username/password for users to login.

B<user_info_box>

Box with username and link to page to edit information.

B<admin_tools_box>

Links to various administrator tools for maintaining the website.

B<powered_by_box>

Box with static content displaying the tools used in the website
(mod_perl, Template Toolkit, OpenInteract).

=head1 AUTHORS

Chris Winters E<lt>chris@cwinters.comE<gt>

=cut
